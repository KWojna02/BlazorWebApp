@page "/movies/details"
@inject BlazorTask2.Data.ApplicationDbContext DB
@using BlazorTask2.Components
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Movie</h4>
    <hr />
    @if (Movie is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <div class="container">
            <span class="row">
               
                <dl class="col">
                    <dt class="col-sm-2">Title</dt>
                    <dd class="col-sm-10">@Movie.Title</dd>
                    <dt class="col-sm-2">Description</dt>
                    <dd class="col-sm-10">@Movie.Description</dd>
                    <dt class="col-sm-2">Release Date</dt>
                    <dd class="col-sm-10">@Movie.ReleaseDate</dd>
                    <dt class="col-sm-2">Rate</dt>
                    <dd class="col-sm-10">@Movie.AverageRate</dd>
                </dl>
                <img src="@Movie.Url" alt="@Movie.Title image" style="width: 200px; height: 200px;" />
            </span>
            <div>
                <div class="row-10">
                    <EditForm method="post" Model="Movie" FormName="edit" OnSubmit=@UpdateRating>
                        <label for="movieRating">Rate:</label>
                        <InputNumber id="movieRating" min="1" max="10" @bind-Value="Rating" />
                        <button type="submit" class="btn btn-outline-primary mt-2 mb-1">Submit</button>
                    </EditForm>
                </div>
            </div>
            <div>
                <a href="@($"/movies")">Back to List</a>
            </div>
           
        </div>
        
        
    }
</div>

@code {
    Movie? Movie;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public int Rating { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Movie = await DB.Movie.FirstOrDefaultAsync(m => m.Id == Id);
        if (Movie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateRating()
    {
        Movie.Rate += (float?)Rating;
        Movie.NumberOfRates++;

        await DB.SaveChangesAsync();
        Console.WriteLine(Movie.Rate);
        Console.WriteLine(Rating);
        Console.WriteLine(Movie.NumberOfRates);
        NavigationManager.NavigateTo("/movies");
        StateHasChanged();
    }
}
